#!/usr/bin/env bash

remoteIPv4="192.168.179.23"
remoteIPv6="60:CF:84:BE:BC:36"
remoteName="G-Outpost"
homeLapUser="moritzgleissner"

# check for flags
printOutput=false
while getopts "h""p" opt; do
  case $opt in
  h)
    echo "Usage: hht"
    echo "Connect to H²T PCs via SSH"
    echo "Options:"
    echo "  -h  Display help"
    exit 0
    ;;
  p)
    printOutput=true
    break
    ;;
  \?)
    echo "Invalid option: -$OPTARG" >&2
    exit 1
    ;;
  :)
    echo "Option -$OPTARG requires an argument." >&2
    exit 1
    ;;
  esac
done

# config
export user=ughlu_gleissner
export proxy=%r@jump.h2t.iar.kit.edu
ssh_timeout=2 # seconds to wait for ssh connection (including handshake)
export pcNumbers=(100 101 102 103 104 105 106 108 031 032 081 082 083 086 087 088 044 047 048)

# for colored output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

collectedData=""

# prameter: $1 = pclist index, $2 = remote, $3 = timeout
sshProcess() {
  # bash magic happens here
  tmp=$(ssh 2>/dev/null -J $proxy $2 -o PasswordAuthentication=no -o StrictHostKeyChecking=no -o ConnectTimeout=$3 '{ ((who -q | grep "users" | cut -d"=" -f2; uptime -p; [ $(who -q | grep "users" | cut -d"=" -f2) -eq 0 ] && echo "no users" || who -q | sed -n 1p; lscpu | grep "Model name" | cut -c 13-; lsmem | grep "Total online" | cut -c 27- | awk -F. "{printf(\$1)"\"" / "\""}"; free -m | grep Mem | awk "{print (\$3/\$2)*100}" | cut -c -4 | awk "{print (\$1)"\"" %"\""}"; [ ! -z "$(nvidia-smi --query-gpu=gpu_name --format=csv,noheader)" || nvidia-smi | grep "Failed" ] && nvidia-smi --query-gpu=gpu_name --format=csv,noheader || lshw -C display 2>/dev/null | grep "product" | cut -d':' -f2; /bin/cat /etc/*-release | grep "PRETTY_NAME" | cut -c 14- | rev | cut -c 2- | rev) | xargs -L 1 echo -ne ";"| cut -c 2-)} ')
  res="$1"
  if [ -z "$tmp" ]; then
    res+=": ${RED}not available${NC}"
  else
    # split string into count and uptime
    count=$(echo $tmp | cut -d';' -f1)
    # format output
    if [ "$count" -eq "0" ]; then
      res+=": ${GREEN}free${NC}"
    elif [ "$count" -eq "1" ]; then
      res+=": ${YELLOW}${count}${NC} user"
    else
      res+=": ${YELLOW}${count}${NC} users"
    fi
    res+="|$tmp"
  fi
  echo -e "$res"
}

threadedSsh() {
  # Enable Job Control
  set -m
  for i in ${!pcNumbers[@]}; do
    pcNumber=${pcNumbers[$i]}
    remote=${user}@pc${pcNumber}.h2t.iar.kit.edu
    sshProcess $pcNumber $remote $ssh_timeout &
  done
  # wait for all processes to finish
  while [ 1 ]; do
    fg 2>/dev/null
    [ $? == 1 ] && break
  done
}

# SILENCE!
collectedData=$(threadedSsh 2>/dev/null)

# sort array by first number and remove elements starting with "sshProcess"
export dataArray=$(echo -e "$collectedData" | sort -t';' -k1 -n | grep -v 'sshProcess')
# add custom number option
dataArray+="\ncustom number|custom number"
dataArray+="\nhome lap|home lap"

preview() {
  info=$(echo -e "$dataArray" | grep "^$1" | cut -d'|' -f2)
  # if info contains "not available"
  if [[ $info == *"not available"* ]]; then
    echo -e "Pc $1 ${RED}not available${NC}"
    return
  # if custom number is selected
  elif [[ $info == *"custom number"* ]]; then
    echo -e "Enter a custom number"
    return
  elif [[ $info == *"home lap"* ]]; then
    echo -e "Use the home lap"
    return
  fi
  IFS=';' read -r -a infoArray <<<"$info"
  echo -e "Users: ${infoArray[2]}\nUptime: ${infoArray[1]}\nCPU: ${infoArray[3]}\nRAM: ${infoArray[4]}\nGPU: ${infoArray[5]} \nOS: ${infoArray[6]}"
}

export -f preview

# use all bevor "|" as data
fzfData=$(echo -e "$dataArray" | cut -d'|' -f1)

connection=$(echo -e "${fzfData[@]}" | fzf --ansi --prompt="󱚤 H²T SSH connections  " --height=~50 --layout=reverse --border --exit-0 --preview 'preview {1}' --preview-window=up:6:wrap)

# cut out connection number or custom
connection=$(echo $connection | cut -d':' -f1)
# if connection is empty, exit
if [ -z "$connection" ]; then
  exit 0
fi
# if custom number is selected
if [ "$connection" == "custom number" ]; then
  read -p "Enter custom number: " selection
  # if selection is empty, exit
  if [ -z "$selection" ]; then
    exit 0
  fi
  # if printOutput is set and true
  command="ssh -X -Y -o StrictHostKeyChecking=no -L 3300:localhost:3300 -J $proxy $user@pc$selection.h2t.iar.kit.edu 2>/dev/null"
  if [ "$printOutput" == "true" ]; then
    echo "$command"
  else
    # suppress output
    eval "$command"
  fi
  exit 0
elif [ "$connection" == "home lap" ]; then
  # if printOutput is set and true
  command="ssh -X -Y -o StrictHostKeyChecking=no -L 3300:localhost:3300 $homeLapUser@$remoteIPv4 2>/dev/null"
  if [ "$printOutput" == "true" ]; then
    echo "$command"
  else
    if ! ping -c 1 -W 1 $remoteIPv4 >/dev/null 2>&1; then
      if [[ $(nmcli -t -f NAME,DEVICE connection show --active | awk -F: '{print $1}' | head -n1) != "$remoteName" ]]; then
        systemctl start wg-quick-GOutpost.service 2>/dev/null
        if [[ $? -ne 0 ]]; then
          echo "Failed to start wg-quick-GOutpost.service"
          exit 1
        fi
        sleep 0.2
      fi

      # try to connect if not use wake up over lan
      if ! ping -c 1 -W 1 $remoteIPv4 >/dev/null 2>&1; then
        # wake up over lan
        wakeonlan $remoteIPv6 >/dev/null 2>&1
        # check with loop on show loading wheel
        spin='-\|/'
        i=0
        while ! ping -c 1 -W 1 $remoteIPv4 >/dev/null 2>&1; do
          i=$(((i + 1) % 4))
          printf "\rWaiting to wake up... ${spin:$i:1}"
          sleep 0.1
        done
        # clear last line
        printf "\r\033[K"
      fi
    fi

    eval "$command"
  fi
  exit 0
else # if a pc number is selected
  # if printOutput is set and true
  command="ssh -X -Y -o StrictHostKeyChecking=no -L 3300:localhost:3300 -J $proxy $user@pc$connection.h2t.iar.kit.edu 2>/dev/null"
  if [ "$printOutput" == "true" ]; then
    echo "$command"
  else
    # suppress output
    eval "$command"
  fi
fi
