#!/usr/bin/env bash

axiiPossibleWorkspaces=("flux")
axiiWorkspace="flux"

# check for flags
while getopts "h""w" opt; do
  case $opt in
  h)
    echo "Usage: hhtf"
    echo "Starts a tmux session with a ssh connection to a remote machine."
    echo "This script is intended to be used with hht."
    exit 0
    ;;
  w) # set workspace
    axiiChooseWorkspace=true
    ;;
  \?)
    echo "Invalid option: -$OPTARG" >&2
    exit 1
    ;;
  esac
done

# look for hht binary with which
if [[ $(which hht >/dev/null) ]]; then
  echo "hht binary not found"
  exit 1
fi

sshCommand=$(hht -p)

if [[ $sshCommand == "" ]]; then
  echo "No ssh command found"
  exit 1
fi

if [[ $axiiChooseWorkspace ]]; then
  axiiPossibleWorkspaces=$(eval "$sshCommand 'bash -ci \"axii w list\" | grep \"-\" | cut -c 5- | cut -f1 -d\":\"'")
  axiiWorkspace=$(echo -e "${axiiPossibleWorkspaces[@]}" | fzf --ansi --prompt=" workspaces  " --height=~50 --layout=reverse --border --exit-0)
fi

if [[ $axiiWorkspace == "" ]]; then
  echo "No workspace selected"
  exit 1
fi

session="hhtf"

# if session exists, attach to it else create it
if tmux has-session -t $session 2>/dev/null; then
  echo "Session $session already exists. Attaching to it."
  tmux attach -t $session
  exit 0
else
  tmux new-session -d -s $session
fi

# init all windows
window=0
tmux rename-window -t $session:$window "run/armarx"
window=1
tmux new-window -t $session:$window -n "run/rest"
window=2
tmux new-window -t $session:$window -n "run/fluxio"
window=3
tmux new-window -t $session:$window -n "comp/robotAPI"
window=4
tmux new-window -t $session:$window -n "dev/ssh"
window=5
tmux new-window -t $session:$window -n "dev/fluxio"

# fish start is slow, give it some time
sleep 0.5 >/dev/null

# axii uses a cache for the commands, so bombarding it with commands is not a good idea
eval "$sshCommand 'unlink ~/axii_startup &>/dev/null'"

window=0
tmux send-keys -t $session:$window "eval '$sshCommand'" C-m
tmux send-keys -t $session:$window "echo 'func(){ while [ -p ~/axii_startup ]; do sleep 1; done }; func' | bash && mkfifo ~/axii_startup; axii w act $axiiWorkspace --no-cd; unlink ~/axii_startup" C-m
tmux send-keys -t $session:$window "armarx reset" C-m
tmux send-keys -t $session:$window "armarx scenario start SkillProviderTest" C-m

window=1
tmux send-keys -t $session:$window "eval '$sshCommand'" C-m
# wait a second for every axii workspace activation
tmux send-keys -t $session:$window "sleep 0.3" C-m
tmux send-keys -t $session:$window "echo 'func(){ while [ -p ~/axii_startup ]; do sleep 1; done }; func' | bash && mkfifo ~/axii_startup; axii w act $axiiWorkspace --no-cd; unlink ~/axii_startup" C-m
tmux send-keys -t $session:$window "cd \$armarx__core__armarest__PATH" C-m
# tmux send-keys -t $session:$window "armarx run --no-auth"

window=2
tmux send-keys -t $session:$window "cd fluxio" C-m
tmux send-keys -t $session:$window "npm run dev" C-m

window=3
tmux send-keys -t $session:$window "eval '$sshCommand'" C-m
tmux send-keys -t $session:$window "sleep 0.6" C-m
tmux send-keys -t $session:$window "echo 'func(){ while [ -p ~/axii_startup ]; do sleep 1; done }; func' | bash && mkfifo ~/axii_startup; axii w act $axiiWorkspace --no-cd; unlink ~/axii_startup" C-m
tmux send-keys -t $session:$window "cd \$armarx__RobotAPI__PATH" C-m

window=4
tmux send-keys -t $session:$window "eval '$sshCommand'" C-m
tmux send-keys -t $session:$window "sleep 0.9" C-m
tmux send-keys -t $session:$window "echo 'func(){ while [ -p ~/axii_startup ]; do sleep 1; done }; func' | bash && mkfifo ~/axii_startup; axii w act $axiiWorkspace --no-cd; unlink ~/axii_startup" C-m
tmux send-keys -t $session:$window "vim" C-m

window=5
tmux send-keys -t $session:$window "cd fluxio" C-m
tmux send-keys -t $session:$window "vim" C-m

tmux attach -t $session
